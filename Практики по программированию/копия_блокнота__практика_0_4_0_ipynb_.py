# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.4.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y9DyHgiUqBW3og8ioNPCj6W7XLI9KFHV

Введите ваше ФИО:
"""



"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

**Задача 1:**



Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).
*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1001
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4754.75
```
Этап 2:

Оформите ваш код в виде функции
"""

def col(cost,quantity,code):
    discount=0
    if quantity>1000 and quantity<=5000 and code == 'SUPERDISCOUNT':
        discount = 10
    elif quantity>5000 and code == 'SUPERDISCOUNT':
        discount = 20
    elif quantity > 1000:
        discount = 5
    elif quantity>5000:
        discount = 15
    summ = cost*quantity-cost*quantity*discount/100
    return [discount,summ]


cost=int(input('Введите стоимость единицы товара:'))
quantity = int(input('Введите количество товара:'))
code = input('Введите промокод:')

mass = col(cost,quantity,code)
print('Ваша скидка:',str(mass[0])+'%')
print('Итоговая сумма:', mass[1])

"""**Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

def positive(mass):
    for i in mass:
        if i < 0:
            mass.remove(i)
    return mass

mass = [-1,5,1,2,-3]
print(positive(mass))

"""**Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.



Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции

"""

def dell(num1,num2):
    maxx = 1
    for i in range(1,max(num1,num2)+1):
        if num1%i==0 and num2%i==0:
            maxx = i
    return maxx

num1 = 30
num2 = 18

print(dell(num1,num2))

"""**Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

def sstr(line):
    mass = line.split(' ')
    slov = {}
    for i in mass:
        if i not in slov:
            slov[i] = 1
        else:
            slov[i] += 1
    return slov



line = 'apple banana apple'
slov = sstr(line)
for i in slov:
    print(i, slov[i])

"""**Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

def anograma(str1,str2):
    mn1 = list(str1)
    mn2 = list(str2)
    new_mn=[]
    for i in mn1:
        for j in mn2:
            if i == j:
                new_mn.append(i)
    if len(new_mn) == len(mn1) and len(new_mn) == len(mn2):
        return True
    else:
        return False

str1 = 'listen'
str2 = 'silent'
print(anograma(str1,str2))

"""**Задача 6:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

alph = ['a','b','c','d','e','f','g','h','i','j','k','l',
'm','n','o','p','q','r','s','t','u','v','w','x','y','z']

str1 = 'cat is running'
num = 5
new_str=''

for i in str1:
    if i==' ':
        new_str+=' '
    else:
        for j in alph:
            if i == j:
                ind = alph.index(j)
                if ind + num <= len(alph):
                    new_str += alph[ind+num]
                else:
                    cur = ind + num - len(alph)
                    new_str += alph[cur]
print(new_str)

"""**Задача 7**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.

"""

def create_account(name, balance):
    return [name, balance, []]

def deposit(account, amount):
    account[1] += amount
    account[2].append((amount, "deposit"))
    print(f"Transaction: Deposit, ${amount}, deposit")

def withdraw(account, amount):
    if account[1] >= amount:
        account[1] -= amount
        account[2].append((amount, "withdrawal"))
        print(f"Transaction: Withdrawal, ${amount}, withdrawal")
    else:
        print("Insufficient funds")

def transfer(sender, receiver, amount):
    if sender[1] >= amount:
        withdraw(sender, amount)
        deposit(receiver, amount)
        print(f"Transaction: Transfer, ${amount}, transfer")
    else:
        print("Insufficient funds")

def print_balance(account):
    print(f"{account[0]}'s current balance: ${account[1]}")

def print_transactions(account):
    for transaction in account[2]:
        print(f"Transaction: {transaction[1]}, ${transaction[0]}, {transaction[1]}")

def main():
    john = create_account("John Doe", 1000)
    jane = create_account("Jane Doe", 0)
    deposit(john, 500)
    withdraw(john, 200)
    transfer(john, jane, 300)

    print_balance(john)
    print_transactions(john)
    print_balance(jane)

main()