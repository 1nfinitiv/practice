# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.0.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hqg--aQXsHP-osncirMfCgqbyNCbgb9t

ФИО:

# Задание (совместное с преподавателем)

Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.
Для этого создайте класс Employee со следующими методами:

- Метод consume_vacation должен отвечать за списание дней отпуска.

Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).

При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.

Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.

- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```


Чтобы проверить работу программы:
1. Создайте экземпляр класса Employee.
2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.
3. Вызовите метод get_vacation_details.
"""



"""# Задание 1

Задание:

Создайте класс с именем Rectangle который имеет:
- Атрибуты ширины и высоты.
- Метод расчета площади.
- Метод расчета периметра.
- Метод отображения размеров прямоугольника.

Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность.
"""

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    def perimeter(self):
        return 2 * (self.width + self.height)

    def display(self):
        print(f"Прямоугольник: ширина = {self.width}, высота = {self.height}")


rect = Rectangle(5, 10)

rect.display()
print(f"Площадь: {rect.area()}")
print(f"Периметр: {rect.perimeter()}")

"""# Задание 2

Задание: Создайте мини версию банковской системы:


Инструкции:

1. Создайте класс BankAccountсо следующими атрибутами:
    - account_holder -  владелец счета
    - balance - баланс счета

2. Реализуйте следующие методы:
    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.
    - deposit(amount): Добавьте указанную сумму к балансу.
    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.
    - get_balance(): Возврат текущего баланса.


Создайте объект класса и продемонстрируйте его возможности
"""

class BankAccount:
    def __init__(self, account_holder):
        self.account_holder = account_holder
        self.balance = 0  # Начальный баланс

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"На счет {self.account_holder} внесено {amount}. Текущий баланс: {self.balance}.")
        else:
            print("Сумма для пополнения должна быть положительной.")

    def withdraw(self, amount):
        if amount > 0:
            if amount <= self.balance:
                self.balance -= amount
                print(f"Со счета {self.account_holder} снято {amount}. Текущий баланс: {self.balance}.")
            else:
                print("Недостаточно средств на счете.")
        else:
            print("Сумма для снятия должна быть положительной.")

    def get_balance(self):
        return self.balance


if __name__ == "__main__":
    # Создание объекта класса BankAccount
    account = BankAccount("Иван Иванов")

    # Проверка начального баланса
    print(f"Начальный баланс: {account.get_balance()}")

    # Пополнение счета
    account.deposit(1000)

    # Снятие средств
    account.withdraw(500)

    # Попытка снять больше средств, чем есть на счете
    account.withdraw(600)

    # Проверка текущего баланса
    print(f"Текущий баланс: {account.get_balance()}")

"""# Задание 3

Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов
"""

import random

class Character:
    def __init__(self, name, armor, weapon, health):
        self.name = name
        self.armor = armor
        self.weapon = weapon
        self.health = health

    def attack(self):
        damage = random.randint(self.weapon['min_damage'], self.weapon['max_damage'])
        print(f"{self.name} атакует и наносит {damage} урона!")
        return damage

    def take_damage(self, damage):
        damage_taken = max(0, damage - self.armor)  # Учитываем броню
        self.health -= damage_taken
        print(f"{self.name} получает {damage_taken} урона! Осталось здоровья: {self.health}")

    def is_alive(self):
        return self.health > 0


class Dragon:
    def __init__(self, name, health, min_damage, max_damage):
        self.name = name
        self.health = health
        self.min_damage = min_damage
        self.max_damage = max_damage

    def attack(self):
        damage = random.randint(self.min_damage, self.max_damage)
        print(f"{self.name} атакует и наносит {damage} урона!")
        return damage

    def take_damage(self, damage):
        self.health -= damage
        print(f"{self.name} получает {damage} урона! Осталось здоровья: {self.health}")

    def is_alive(self):
        return self.health > 0


def create_knight():
    name = input("Введите имя рыцаря: ")
    armor = int(input("Введите уровень брони: "))
    weapon = {
        'name': 'Меч',
        'min_damage': 5,
        'max_damage': 15
    }
    health = 100
    return Character(name, armor, weapon, health)


def main():
    print("Добро пожаловать в игру 'Рыцарь и Дракон'!")
    knight = create_knight()
    dragon = Dragon("Дракон", 80, 10, 20)

    while knight.is_alive() and dragon.is_alive():
        # Рыцарь атакует дракона
        dragon.take_damage(knight.attack())
        if not dragon.is_alive():
            print(f"{dragon.name} повержен! {knight.name} победил!")
            break

        # Дракон атакует рыцаря
        knight.take_damage(dragon.attack())
        if not knight.is_alive():
            print(f"{knight.name} пал в бою! {dragon.name} победил!")
            break

        print()  # Пустая строка для разделения ходов

    print("Игра окончена!")


if __name__ == "__main__":
    main()

"""# Дополнительное задание

Задача: Система управления библиотекой

**Цель**
Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.

**Требования**

1. **Определение класса**:
   – Создайте класс с именем «Book» со следующими атрибутами:
     - `title`
     - `автор`
     - `isbn`
     - `is_borrowed` (по умолчанию `False`)

2. **Класс библиотеки**:
   - Создайте класс с именем Library, который управляет коллекцией книг.
   - Класс должен иметь следующие методы:
     - `__init__(self)`: инициализирует пустой список книг.
     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.
     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.
     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.
     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.
     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.

3. **Взаимодействие с пользователем**:
   - Создайте простое текстовое меню, которое позволит пользователям:
     - Добавить книгу
     - Одолжить книгу
     - Вернуть книгу
     - Список доступных книг
     - Выйти из программы
"""



