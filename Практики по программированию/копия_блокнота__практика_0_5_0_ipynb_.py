# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.5.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t3WVNUJyC3YHlibUmj4daWad3Z-hJUVO

ФИО:
"""



"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

s = 'Alice'
slov = {"Alice": 25, "Bob": 30, "Charlie": 35}
for i in slov.keys():
    if i==s:
        print(i,slov[i])

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

m = [1, 2, 3, 4, 5, 6, 7, 8, 9]
summ=0
for i in m:
    if i%2 == 0 and i>=0:
        summ+=i
print(summ)

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}

for k,v in fruits_and_colors.items():
    if v == 'yellow':
        print(k)

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

slov = {"a": 1, "b": 2, "c": 3}
new_slov = {}
for k, v in slov.items():
    new_slov[v]=k
print(new_slov)

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество слов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки
*   Использование готовых функций для подсчета элементов
"""

def schet(m,slov):
    for i in m:
        if i in slov:
            slov[i]+=1
        else:
            slov[i]=1
    return slov

def sortt(slov):
    sorted_dict = {}
    while slov:
        max_key = max(slov, key=slov.get)
        sorted_dict[max_key] = slov.pop(max_key)
    return sorted_dict


m = ['apple','banana','orange','apple','apple','banana']
slov = {}
print(schet(m,slov))
print(sortt(slov))

"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

def age(people_info):
    m = []
    for k,v in people_info.items():
        if v['age']>30:
            m.append(k)
    return m

def cities(people_info):
    city_dict = {}
    for k,v in people_info.items():
        if v['city'] in city_dict:
            city_dict[v['city']] += 1
        else:
            city_dict[v['city']] = 1
    return city_dict
def professions(people_info):
    profession_dict = {}
    for k,v in people_info.items():
        if v['occupation'] in profession_dict:
            profession_dict[v['occupation']]+=1
        else:
            profession_dict[v['occupation']] = 1
    return profession_dict


people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

print(age(people_info))
print(cities(people_info))
print(professions(people_info))

"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

def add_review(reviews):
    #Добавляет новый отзыв о предмете.
    subject = input("Введите название предмета: ")
    try:
        grade = int(input("Введите оценку (от 1 до 5): "))
        if grade < 1 or grade > 5:
            raise ValueError("Оценка должна быть от 1 до 5.")
    except ValueError as e:
        print(f"Ошибка ввода: {e}")
        return

    text = input("Введите текст отзыва: ")
    if subject not in reviews:
        reviews[subject] = []
    reviews[subject].append((grade, text))
    print("Отзыв успешно добавлен!")



def view_reviews(reviews):
    #Просматривает все отзывы о заданном предмете.
    subject = input("Введите название предмета для просмотра отзывов: ")
    if subject in reviews and reviews[subject]:
        print(f"Отзывы о предмете '{subject}':")
        #enumerate берет индекс и значение св массиве
        for index, (grade, comment) in enumerate(reviews[subject]):
            print(f"{index + 1}. Оценка: {grade}, Отзыв: {comment}")
    else:
        print(f"Отзывов о предмете '{subject}' нет.")


def delete_review(reviews):
    #Удаляет отзыв по индексу о заданном предмете.
    subject = input("Введите название предмета для удаления отзыва: ")
    if subject in reviews and reviews[subject]:
        view_reviews(reviews)  # Показать доступные отзывы для удаления
        try:
            index = int(input("Введите индекс отзыва для удаления: ")) - 1
            if index < 0 or index >= len(reviews[subject]):
                raise IndexError("Некорректный индекс.")
            deleted_review = reviews[subject].pop(index)
            print(f"Отзыв удалён: Оценка: {deleted_review[0]}, Отзыв: {deleted_review[1]}")
        except (ValueError, IndexError) as e:
            print(f"Ошибка: {e}")
    else:
        print(f"Отзывов о предмете '{subject}' нет.")


def average_grade(reviews):
    #Вычисляет средний балл по предмету.
    subject = input("Введите название предмета для вычисления среднего балла: ")
    if subject in reviews and reviews[subject]:
        summ=0
        for grade, text in reviews[subject]:
            summ+=grade
        average_grade = summ / len(reviews[subject])
        print(f"Средний балл по предмету '{subject}': {average_grade}")
    else:
        print(f"Отзывов о предмете '{subject}' нет.")


reviews = {}

while True:
    print("\nМеню:")
    print("1. Добавить отзыв")
    print("2. Просмотреть отзывы")
    print("3. Удалить отзыв")
    print("4. Вычислить средний балл")
    print("5. Выход")
    choice = input("Выберите действие (1-5): ")

    if choice == '1':
        add_review(reviews)
        print(reviews)
    elif choice == '2':
        view_reviews(reviews)
    elif choice == '3':
        delete_review(reviews)
    elif choice == '4':
        average_grade(reviews)
    elif choice == '5':
        print("Выход из программы.")
        break
    else:
        print("Некорректный выбор")