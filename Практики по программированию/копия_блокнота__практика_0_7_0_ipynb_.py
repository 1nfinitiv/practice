# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.7.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/180Ql-alVURpbYBg7y6ZR5lGcW6HZH29U

Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)

ФИО:
"""



"""## Задание 1. HTTP-запросы, ответы и погода

Описание:

Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.

Можно использовать API: https://open-meteo.com/. Используйте метод GET.


Ввод
```
56.50, 60.35
```

Вывод
```
Сегодня (1.11) погода 20 ◦С, нет осадков, туман
```
"""

import requests
from datetime import datetime


# функция для отправки запроса
def send_request(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print('Response code:', response.status_code)
        return False


# отчистка данных
def clear_data(data):
    # определение даты
    current_date = datetime.today().date()
    day = current_date.day
    month = current_date.month
    current_date = f'{day}.{month}'

    # определение температуры
    temperature = data['current']['temperature_2m']
    temperature_format = data['current_units']['temperature_2m']

    # определение погодных условии
    weather_code = data['current']['weather_code']
    bad_weather = [51, 53, 55, 61, 63, 65, 71, 73, 75, 80, 81, 82 ]
    if weather_code in [0, 1]:
        message = 'нет осадков, ясно'
    elif weather_code == 45:
        message = 'нет осадков, туман'
    elif weather_code in bad_weather:
        message = 'осадки, без тумана'
    else:
        message = 'посмотри в окно'

    message = f'Сегодня ({current_date}) погода {temperature} {temperature_format}, {message}'

    return message


# основная функция
def main():
    coordinates = input('Введите ваши координаты:\n').split(', ')
    url = f'https://api.open-meteo.com/v1/forecast?latitude={coordinates[0]}&longitude={coordinates[1]}&current=temperature_2m,weather_code'
    data = send_request(url)
    print(clear_data(data))


if __name__ == '__main__':
    main()

"""## Задание 2. HTTP-запросы, ответы и покемоны

**Описание:**


Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:

1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов

2. Извлеките имена покемонов из ответа и выведите их списком

3. Введите с помощью input() название одного из покемонов


```
Имя покемона: clefairy
```



4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне

5. Извлеките и выведите следующие данные о введенном покемоне:

     • Имя

     • Тип

     • Вес

     • Рост

     • Способности

Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию.
"""

import requests


def get_pokemons():
    url = "https://pokeapi.co/api/v2/pokemon?limit=20"
    response = requests.get(url)
    return response.json()


def get_pokemon_details(pokemon_name):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}"
    response = requests.get(url)
    return response.json()


def print_pokemon_info(pokemon_data):
    name = pokemon_data.get("name")
    types = [t['type']['name'] for t in pokemon_data.get("types", [])]
    weight = pokemon_data.get("weight")
    height = pokemon_data.get("height")
    abilities = [a['ability']['name'] for a in pokemon_data.get("abilities", [])]

    print(f"Имя: {name.capitalize()}")
    print(f"Типы: {', '.join(types).capitalize()}")
    print(f"Вес: {weight}")
    print(f"Рост: {height}")
    print(f"Способности: {', '.join(abilities).capitalize()}")



if __name__ == "__main__":
    pokemons = get_pokemons()
    pokemon_names = [pokemon['name'] for pokemon in pokemons['results']]


    print("Список первых 20 покемонов:")
    for name in pokemon_names:
        print(name.capitalize())


    pokemon_name = input("Введите название одного из покемонов: ")


    try:
        pokemon_data = get_pokemon_details(pokemon_name)
        print_pokemon_info(pokemon_data)
    except Exception as e:
        print(f"Ошибка: {e}. Проверьте правильность написания имени покемона.")

"""## Задание 3. HTTP-запросы, ответы и посты

**Описание:**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:

1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON

2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON

3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль
"""

import requests


def get_posts():
    url = "https://jsonplaceholder.typicode.com/posts"
    response = requests.get(url)
    return response.json()


def get_post_by_id(post_id):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    response = requests.get(url)
    return response.json()


def print_post_info(post_data):
    print("Post ID:", post_data.get("id"))
    print("User  ID:", post_data.get("userId"))
    print("Title:", post_data.get("title"))
    print("Body:", post_data.get("body"))


posts = get_posts()
print(f"Total posts fetched: {len(posts)}\n")

post_id = 1
post_data = get_post_by_id(post_id)

print_post_info(post_data)

"""## Задание 4. HTTP-запросы, ответы и работа с постами

**Описание**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:

1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON


```
Заголовок: Новый пост
Содержимое поста: Тут должно находиться содержимое нового поста...
ID пользователя: 10
```



2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON

3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа
"""

import requests


def create_post(title, body, user_id):
    url = "https://jsonplaceholder.typicode.com/posts"
    post_data = {
        "title": title,
        "body": body,
        "userId": user_id
    }
    response = requests.post(url, json=post_data)
    return response.json()


def update_post(post_id, new_title, new_body):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    updated_data = {
        "title": new_title,
        "body": new_body
    }
    response = requests.put(url, json=updated_data)
    return response.json()


def delete_post(post_id):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    response = requests.delete(url)
    return response.status_code


if __name__ == "__main__":
    title = input("Введите заголовок поста: ")
    body = input("Введите содержимое поста: ")
    user_id = int(input("Введите ID пользователя: "))

    created_post = create_post(title, body, user_id)
    print("Созданный пост:")
    print(created_post)

    post_id = int(input("Введите ID поста для обновления: "))
    new_title = input("Введите новый заголовок поста: ")
    new_body = input("Введите новое содержимое поста: ")

    updated_post = update_post(post_id, new_title, new_body)
    print("Обновлённый пост:")
    print(updated_post)

    post_id_to_delete = int(input("Введите ID поста для удаления: "))
    status_code = delete_post(post_id_to_delete)
    print(f"Статус код удаления поста: {status_code}")

"""## Задание 5. HTTP-запросы, ответы и пёсики

**Описание**

Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.

Этапы:

1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка

2. Реализуйте возможность ввода нескольких пород собак через запятую


```
african, chow, dingo
```



3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого


Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.

*Подсказка*



```
import requests
from PIL import Image
from IPython.display import display
import io

url = <____>
response = <____>
        
if response.<______> == <___>:
      image_url = response.json()['message']

res = requests.<__>(image_url)
img = Image.open(io.BytesIO(res.content))
display(img)
```
"""

import requests


def get_breeds():
    url = "https://dog.ceo/api/breeds/list/all"
    response = requests.get(url)

    if response.status_code == 200:
        breeds = response.json()['message']
        breed_list = [f"{index + 1}. {breed}" for index, breed in enumerate(breeds.keys())]
        print("Список пород собак:")
        print("\n".join(breed_list))
        return breeds
    else:
        print("Не удалось получить список пород.")
        return None


def get_images(breeds, selected_breeds):
    for breed in selected_breeds:
        if breed in breeds:
            url = f"https://dog.ceo/api/breed/{breed}/images/random"
            response = requests.get(url)
            if response.status_code == 200:
                image_url = response.json()['message']
                print(f"Изображение для породы {breed}: {image_url}")
            else:
                print(f"Не удалось получить изображение для породы {breed}.")
        else:
            print(f"Порода {breed} не найдена.")


def main():
    breeds = get_breeds()
    if breeds:
        selected_breeds = input("Введите породы собак через запятую: ").replace(" ", "").split(",")
        get_images(breeds, selected_breeds)


if __name__ == "__main__":
    main()